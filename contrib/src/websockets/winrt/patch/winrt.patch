diff -rupN libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/CMakeLists.txt libwebsockets2/CMakeLists.txt
--- libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/CMakeLists.txt	Sat Jul  5 18:56:11 2014
+++ libwebsockets2/CMakeLists.txt	Tue Jun  9 13:05:39 2015
@@ -1,4 +1,12 @@
-cmake_minimum_required(VERSION 2.6)
+ cmake_minimum_required(VERSION 2.6)
+
+if(CMAKE_SYSTEM_NAME MATCHES WindowsPhone OR CMAKE_SYSTEM_NAME MATCHES WindowsStore)
+  cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
+  #Required to resolve linker error issues due to incompatibility with CMake v3.0+ policies.
+  #CMake fails to find _fseeko() which leads to subsequent linker error.
+  #See details here: http://www.cmake.org/Wiki/CMake/Policies
+  cmake_policy(VERSION 2.8)
+endif()
 
 project(libwebsockets)
 
@@ -139,6 +147,10 @@ if (MINGW)
 	set(LWS_MINGW_SUPPORT 1)
 endif()
 
+if(CMAKE_SYSTEM_NAME MATCHES WindowsPhone OR CMAKE_SYSTEM_NAME MATCHES WindowsStore)
+  set(WINRT 1)
+endif()
+
 include_directories("${PROJECT_BINARY_DIR}")
 
 include(CheckCSourceCompiles)
@@ -402,7 +414,7 @@ endif(WIN32)
 # not "libwebsocket_shared".
 set_target_properties(websockets_shared
 		PROPERTIES 
-		OUTPUT_NAME websockets)
+		OUTPUT_NAME libwebsockets)
 
 # Set the so version of the lib.
 # Equivalent to LDFLAGS=-version-info x:x:x
@@ -903,6 +915,10 @@ message(" LWS_WITHOUT_DAEMONIZE = ${LWS_
 message(" LWS_USE_LIBEV = ${LWS_USE_LIBEV}")
 message(" LWS_IPV6 = ${LWS_IPV6}")
 message(" LWS_WITH_HTTP2 = ${LWS_WITH_HTTP2}")
+message(" WINRT = ${WINRT}")
+message(" CMAKE_SYSTEM_NAME = ${CMAKE_SYSTEM_NAME}")
+message(" CMAKE_SYSTEM_VERSION = ${CMAKE_SYSTEM_VERSION}")
+
 message("---------------------------------------------------------------------")
 
 # These will be available to parent projects including libwebsockets using add_subdirectory()
diff -rupN libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/config.h.cmake libwebsockets2/config.h.cmake
--- libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/config.h.cmake	Sat Jul  5 18:56:11 2014
+++ libwebsockets2/config.h.cmake	Tue Jun  9 13:05:45 2015
@@ -17,6 +17,9 @@
 /* Build with OpenSSL support */
 #cmakedefine LWS_OPENSSL_SUPPORT
 
+/* Build with WinRT support */
+#cmakedefine WINRT
+
 /* The client should load and trust CA root certs it finds in the OS */
 #cmakedefine LWS_SSL_CLIENT_USE_OS_CA_CERTS
 
diff -rupN libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/lib/lws-plat-win.c libwebsockets2/lib/lws-plat-win.c
--- libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/lib/lws-plat-win.c	Sat Jul  5 18:56:11 2014
+++ libwebsockets2/lib/lws-plat-win.c	Tue Jun  9 13:05:17 2015
@@ -294,6 +294,30 @@ lws_plat_change_pollfd(struct libwebsock
 	return 1;
 }
 
+#ifdef WINRT
+DWORD WINAPI WinRT_GetFileSize(const char* filename)
+{
+    struct stat info;
+    // Get data associated with "crt_stat.c":
+    int result = stat(filename, &info);
+
+    // Check if statistics are valid:
+    if (result != 0)
+    {
+        // Failed
+        return -1;
+    }
+    else
+    {
+        return (long) (info.st_size);
+    }
+
+
+}
+
+#endif
+
+
 LWS_VISIBLE HANDLE
 lws_plat_open_file(const char* filename, unsigned long* filelen)
 {
@@ -302,11 +326,17 @@ lws_plat_open_file(const char* filename,
 
 	MultiByteToWideChar(CP_UTF8, 0, filename, -1, buffer,
 				sizeof(buffer) / sizeof(buffer[0]));
+
+#ifdef WINRT
+    ret = CreateFile2(buffer, GENERIC_READ, FILE_SHARE_READ,OPEN_EXISTING, NULL);
+    if (ret != LWS_INVALID_FILE)
+        *filelen = WinRT_GetFileSize(filename);
+#else
 	ret = CreateFileW(buffer, GENERIC_READ, FILE_SHARE_READ,
 				NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
-
-	if (ret != LWS_INVALID_FILE)
-		*filelen = GetFileSize(ret, NULL);
+    if (ret != LWS_INVALID_FILE)
+        *filelen = GetFileSize(ret, NULL);
+#endif
 
 	return ret;
 }
diff -rupN libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/lib/private-libwebsockets.h libwebsockets2/lib/private-libwebsockets.h
--- libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/lib/private-libwebsockets.h	Sat Jul  5 18:56:11 2014
+++ libwebsockets2/lib/private-libwebsockets.h	Tue Jun  9 13:05:25 2015
@@ -65,7 +65,19 @@
 
 #define compatible_close(fd) closesocket(fd)
 #define compatible_file_close(fd) CloseHandle(fd)
+
+#ifdef WINRT
+
+#define _WINSOCK_DEPRECATED_NO_WARNINGS
+#define compatible_file_seek_cur(fd, offset) {\
+    LARGE_INTEGER t;\
+    t.QuadPart = (LONGLONG) offset;\
+    SetFilePointerEx(fd, t, NULL, 1);\
+}
+#else
 #define compatible_file_seek_cur(fd, offset) SetFilePointer(fd, offset, NULL, FILE_CURRENT)
+#endif
+
 #define compatible_file_read(amount, fd, buf, len) {\
 	DWORD _amount; \
 	if (!ReadFile(fd, buf, len, &_amount, NULL)) \
@@ -80,7 +92,17 @@
 #ifdef HAVE_IN6ADDR_H
 #include <in6addr.h>
 #endif
+
+#ifdef WINRT
+struct tcp_keepalive {
+    ULONG onoff;
+    ULONG keepalivetime;
+    ULONG keepaliveinterval;
+};
+#define SIO_KEEPALIVE_VALS  _WSAIOW(IOC_VENDOR,4)
+#else
 #include <mstcpip.h>
+#endif
 
 #ifndef __func__
 #define __func__ __FUNCTION__
diff -rupN libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/win32port/win32helpers/gettimeofday.c libwebsockets2/win32port/win32helpers/gettimeofday.c
--- libwebsockets-c1fdd10ff887994622f6f8a9534d4ab5c320c86d/win32port/win32helpers/gettimeofday.c	Sat Jul  5 18:56:11 2014
+++ libwebsockets2/win32port/win32helpers/gettimeofday.c	Tue Jun  9 13:05:32 2015
@@ -1,5 +1,10 @@
 #include <time.h>
 #include <windows.h> //I've ommited context line
+#include <lws_config.h>
+
+#ifdef WINRT
+#include <winsock2.h>
+#endif
 
 #if defined(_MSC_VER) || defined(_MSC_EXTENSIONS)
   #define DELTA_EPOCH_IN_MICROSECS  11644473600000000Ui64
@@ -34,16 +39,18 @@ int gettimeofday(struct timeval *tv, str
 
 		/*converting file time to unix epoch*/
 		tmpres /= 10;  /*convert into microseconds*/
-		tmpres -= DELTA_EPOCH_IN_MICROSECS;
+		tmpres -= DELTA_EPOCH_IN_MICROSECS;
 		tv->tv_sec = (long)(tmpres / 1000000UL);
 		tv->tv_usec = (long)(tmpres % 1000000UL);
 	}
  
 	if (NULL != tz) {
+#ifndef WINRT
 		if (!tzflag) {
 			_tzset();
 			tzflag++;
 		}
+#endif
 		tz->tz_minuteswest = _timezone / 60;
 		tz->tz_dsttime = _daylight;
 	}
